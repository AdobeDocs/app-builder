{"version":3,"file":"component---src-pages-guides-runtime-guides-reference-docs-configuringproxy-md-94b51cec1c1a40596241.js","mappings":"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","sources":["webpack://adobe-developer-app-builder/./src/pages/guides/runtime_guides/reference_docs/configuringproxy.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"configuring-a-secure-proxy\"\n    }}>{`Configuring a Secure Proxy`}</h2>\n    <p>{`For security reasons, Runtime does not expose egress IPs. Customers who need a way to secure communication with downstream services using IP whitelisting can use a proxy between their backend service and I/O Runtime.`}</p>\n    <p>{`This can be done by adding a proxy component (in this example, an AWS EC2 instance running nginx). The proxy component will have a fixed IP address, so using an IP allowlist can secure the backend service. Communication between I/O Runtime and the proxy component will be secured via mutual TLS (mTLS) communication. `}</p>\n    <p><img alt=\"\" src=\"E:\\\\GitHub\\\\app-builder\\\\src\\\\pages\\\\images\\\\configure-proxy.png\" /></p>\n    <p>{`The following steps outline how to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Configure the NGINX proxy component to support mutual TLS (mTLS)`}</li>\n      <li parentName=\"ul\">{`Configure an AppBuilder action to use mTLS to securely communicate with the proxy component`}</li>\n    </ul>\n    <p>{`An EC2 instance with NGINX installed is a prerequisite for configuring this proxy. The `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.nginx.com/nginx/deployment-guides/amazon-web-services/ec2-instances-for-nginx/\"\n      }}>{`official NGINX documentation`}</a>{` has more information.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Verify SSH connectivity to the EC2 instance. (screenshot of terminal/template cmd)`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`ssh -i <your-key.pem> ec2-user@<EC2-IPAddress>\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Generate certificates needed for mTLS (link out to example-mtls project for generating secrets)`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Generate `}<strong parentName=\"p\">{`mtls_server.key/.crt`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`openssl req -x509 -nodes -days 3650 -newkey rsa:4096 -keyout mtls_server.key -out mtls_server.crt\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`Generate `}<strong parentName=\"p\">{`mtls_client.key/.crt`}</strong></p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`openssl req -x509 -nodes -days 3650 -newkey rsa:4096 -keyout mtls_client.key -out mtls_client.crt\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Use the referenced file `}<inlineCode parentName=\"p\">{`mtls.conf.example`}</inlineCode>{` and replace `}<inlineCode parentName=\"p\">{`DESTINATION_HOST`}</inlineCode>{` with the final destination you would like to proxy to. For example, if your target host is `}<inlineCode parentName=\"p\">{`api.myhost.com`}</inlineCode>{` you would search for this line:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`proxy_pass https://DESTINATION_HOST\n`}</code></pre>\n        <p parentName=\"li\">{` Then make the replacement:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`proxy_pass https://api.myhost.com\n`}</code></pre>\n        <p parentName=\"li\">{`Save the resulting file locally as `}<inlineCode parentName=\"p\">{`mtls.conf`}</inlineCode>{`, in the same folder as your certificates.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Copy sample NGINX configuration to EC2 instance with updated placeholder details. (terminal screenshots for `}<inlineCode parentName=\"p\">{`scp`}</inlineCode>{` cmds)`}</p>\n        <ol parentName=\"li\">\n          <li parentName=\"ol\">\n            <p parentName=\"li\">{`First copy files to home folder:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`scp -i <your-key.pem> mtls_server.key mtls_server.crt mtls_client.key mtls_client.crt mtls.conf ec2-user@<EC2-IPAddress>:~/\n`}</code></pre>\n          </li>\n          <li parentName=\"ol\">\n            <p parentName=\"li\">{`Then move them into place, while connected via SSH to the ec2 instance:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`sudo mv ~/mtls* /etc/nginx/conf.d/\n`}</code></pre>\n          </li>\n        </ol>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Restart `}<inlineCode parentName=\"p\">{`nginx`}</inlineCode></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Verify you can connect via curl locally from the ec2 instance:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`$ curl -ki --cert /etc/nginx/conf.d/mtls_client.crt --key /etc/nginx/conf.d/mtls_client.key https://localhost/\n`}</code></pre>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`To preserve your changes, you may `}<a parentName=\"li\" {...{\n              \"href\": \"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html\"\n            }}>{`create an AMI`}</a>{` from your running AWS instance.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In your AppBuilder app, you will need to make changes to wire the mTLS client key and certificate.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`.env`}</inlineCode>{`:`}</strong>{` Add the following lines with paths to your mtls client certificate files.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`## Support mTLS\n__AIO_MTLS_CERT=(cat /path/to/mtls_client.crt)\n__AIO_MTLS_KEY=(cat /path/to/mtls_client.key)\n`}</code></pre>\n          </li>\n          <li parentName=\"ul\">\n            <p parentName=\"li\"><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`app.config.yaml`}</inlineCode>{`:`}</strong>{` Add the following default parameters pointing to the environment variables.`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`inputs:\n    __AIO_MTLS_CERT: $__AIO_MTLS_CERT\n    __AIO_MTLS_KEY: $__AIO_MTLS_KEY\n`}</code></pre>\n          </li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`In your action code, you can reference these environment variables when making an HTTP request to the proxy component (replace the `}<inlineCode parentName=\"p\">{`PROXY_ENDPOINT`}</inlineCode>{` with your AWS EC2 hostname/IP):`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`// configure the client side of mTLS\nconst options = {\n    cert: params.__AIO_MTLS_CERT,\n    key:  params.__AIO_MTLS_KEY,\n    rejectUnauthorized: false, // in test, if you're working with self-signed certificates\n    keepAlive: false, // switch to true if you're making a lot of calls from this client\n};\n\nconst sslConfiguredAgent = new https.Agent(options);\n\ntry {\n    // Replace the \\`PROXY_ENDPOINT\\` with your AWS EC2 hostname/IP\n    const url = \"https://PROXY_ENDPOINT/path/to/resource?param=value\"\n\n    console.log(\\`Making call to: [\\${url}]\\`);\n    // make the request just as you would normally ...\n    const response = await fetch(url, {\n    agent: sslConfiguredAgent, // ... but add the agent we initialised\n    });\n\n    const responseBody = await response.text();\n\n    // handle the response as you would see fit\n    console.log(responseBody);\n    return { statusCode: 200, body: { resp: responseBody }};\n} catch (error) {\n    // return the error\n    console.log(error);\n    return { statusCode: 418, body: { error: error }};\n}\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Deploy your application to I/O Runtime via `}<inlineCode parentName=\"p\">{`aio app deploy`}</inlineCode>{` and test out the setup by invoking your action.`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next steps`}</h2>\n    <p>{`Return to the `}<a parentName=\"p\" {...{\n        \"href\": \"index.md\"\n      }}>{`Runtime Reference Documentation Index`}</a>{`.`}</p>\n    <p>{`Return to the `}<a parentName=\"p\" {...{\n        \"href\": \"../../index.md\"\n      }}>{`Guides Index`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","alt","src","parentName","isMDXComponent"],"sourceRoot":""}