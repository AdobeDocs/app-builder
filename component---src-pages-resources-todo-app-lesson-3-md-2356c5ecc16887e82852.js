"use strict";(self.webpackChunkadobe_developer_app_builder=self.webpackChunkadobe_developer_app_builder||[]).push([[9850],{43601:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return l},default:function(){return s}});var n=a(58168),o=a(80045),r=(a(88763),a(15680)),i=a(83407);const p=["components"],l={},m={_frontmatter:l},d=i.A;function s(e){let{components:t}=e,a=(0,o.A)(e,p);return(0,r.mdx)(d,(0,n.A)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"lesson-3-setup-the-createtodolist-component"},"Lesson 3: Setup the CreateTodoList component"),(0,r.mdx)("p",null,"In this lesson, we'll create a first React component that will be used to perform a create operation to generate a to-do list. The only value that will be passed to create a to-do list is its name."),(0,r.mdx)("p",null,"First, we'll create the React component file under ",(0,r.mdx)("inlineCode",{parentName:"p"},"web-src/src/components/")," and name it ",(0,r.mdx)("inlineCode",{parentName:"p"},"CreateTodoList.js"),".\nIf you're not familiar with React components and props, please first read the React documentation on ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/docs/introducing-jsx.html"},"JSX")," and ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/docs/components-and-props.html"},"Components and props"),"."),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},"Note: these documents, and this tutorial, refer to the legacy version of React. The sample project should work as indicated.")),(0,r.mdx)("h2",{id:"import-react-spectrum-components"},"Import React Spectrum components"),(0,r.mdx)("p",null,"If you choose the React Spectrum template, the App Builder app will have ",(0,r.mdx)("inlineCode",{parentName:"p"},"@adobe/react-spectrum")," dependencies installed by default."),(0,r.mdx)("p",null,"This component will make use of several React Spectrum components: "),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://react-spectrum.adobe.com/react-spectrum/Flex.html"},"Flex")," for the layout."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://react-spectrum.adobe.com/react-spectrum/Form.html"},"Form")," to submit the todo list."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://react-spectrum.adobe.com/react-spectrum/TextField.html"},"TextField")," as the main input field."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://react-spectrum.adobe.com/react-spectrum/Button.html"},"Button")," to trigger form submission.")),(0,r.mdx)("p",null,"We can import them all with a single statement:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-jsx"},"import { Flex, Form, TextField, Button } from '@adobe/react-spectrum';\n")),(0,r.mdx)("h2",{id:"component-property"},"Component property"),(0,r.mdx)("p",null,"The component will accept a single property, a callback function ",(0,r.mdx)("inlineCode",{parentName:"p"},"onCreate")," invoked when a todo list is created:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"function CreateTodoList({ onCreate }) {\n  // ...\n}\n")),(0,r.mdx)("h2",{id:"creating-a-to-do-list"},"Creating a to-do list"),(0,r.mdx)("p",null,"We'll declare a state variable and bind it to the Textfield in order to retrieve the input value. If you're not familiar with React hooks, please read the ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-intro.html"},"hooks introduction"),"."),(0,r.mdx)("p",null,"First, we have to import the ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-state.html"},"State Hook")," ",(0,r.mdx)("inlineCode",{parentName:"p"},"useState")," from ",(0,r.mdx)("inlineCode",{parentName:"p"},"react")," before being able to define a state variable:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"import { useState } from 'react';\n")),(0,r.mdx)("p",null,"Calling ",(0,r.mdx)("inlineCode",{parentName:"p"},"useState")," will return an ",(0,r.mdx)("inlineCode",{parentName:"p"},"array")," with two values: the state value and a function to set the state value:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"const [todoListName, setTodoListName] = useState('');\n")),(0,r.mdx)("p",null,"We're using a ",(0,r.mdx)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"},"destructuring assignment")," to retrieve and declare both values. On initialization, the value of ",(0,r.mdx)("inlineCode",{parentName:"p"},"todoListName")," is set to empty string ",(0,r.mdx)("inlineCode",{parentName:"p"},"''")," by default."),(0,r.mdx)("p",null,"Next we'll bind the ",(0,r.mdx)("inlineCode",{parentName:"p"},"todoListName")," state to the TextField value and update it with ",(0,r.mdx)("inlineCode",{parentName:"p"},"setTodoListName()")," on every input change.\nLearn more about React event handling ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/docs/handling-events.html"},"here"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-jsx"},'<TextField\n    value={todoListName}\n    onChange={(value) => {\n      setTodoListName(value);\n    }}\n    label="Todo list"\n    placeholder="Name"\n/>\n<Button type="submit" variant="cta">\n  Create\n</Button>\n')),(0,r.mdx)("p",null,"We'll wrap the ",(0,r.mdx)("inlineCode",{parentName:"p"},"TextField")," and submit ",(0,r.mdx)("inlineCode",{parentName:"p"},"Button")," with a ",(0,r.mdx)("inlineCode",{parentName:"p"},"Form")," component so that we can invoke the callback function on form submission. We'll prevent the default form submission behavior with ",(0,r.mdx)("inlineCode",{parentName:"p"},"event.preventDefault()")," and pass the to-do list name as parameter to the callback function:  "),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-jsx"},"<Form\n  onSubmit={async (event) => {\n    event.preventDefault();\n\n    onCreate && (await onCreate(todoListName));\n}}>\n")),(0,r.mdx)("h2",{id:"the-full-component"},"The full component"),(0,r.mdx)("p",null,"Finally, we'll add the Flex layout to align the TextField with the Button to obtain a fully functional React component.\nRead more about React rendering ",(0,r.mdx)("a",{parentName:"p",href:"https://reactjs.org/docs/rendering-elements.html"},"here"),"."),(0,r.mdx)("p",null,"See the full component code ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/AdobeDocs/adobeio-samples-todoapp/blob/master/web-src/src/components/CreateTodoList.js"},"here"),"."),(0,r.mdx)("p",null,(0,r.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"612px"}},"\n      ",(0,r.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"28.125%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,r.mdx)("picture",{parentName:"span"},"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/app-builder/static/c89f644568749b429c7ab3572d14d33c/5530d/createtodolist.webp 320w","/app-builder/static/c89f644568749b429c7ab3572d14d33c/d408e/createtodolist.webp 612w"],sizes:"(max-width: 612px) 100vw, 612px",type:"image/webp"}),"\n          ",(0,r.mdx)("source",{parentName:"picture",srcSet:["/app-builder/static/c89f644568749b429c7ab3572d14d33c/dd4a7/createtodolist.png 320w","/app-builder/static/c89f644568749b429c7ab3572d14d33c/dbf98/createtodolist.png 612w"],sizes:"(max-width: 612px) 100vw, 612px",type:"image/png"}),"\n          ",(0,r.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/app-builder/static/c89f644568749b429c7ab3572d14d33c/dbf98/createtodolist.png",alt:"CreateTodoList",title:"CreateTodoList",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-resources-todo-app-lesson-3-md-2356c5ecc16887e82852.js.map