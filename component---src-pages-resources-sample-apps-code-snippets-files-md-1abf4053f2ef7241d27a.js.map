{"version":3,"file":"component---src-pages-resources-sample-apps-code-snippets-files-md-1abf4053f2ef7241d27a.js","mappings":"kTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,yBACJ,0BACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,wEACJ,yEACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,6tDAyDNH,EAAAA,EAAAA,KAAA,MACE,GAAM,+DACJ,gEACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,8uDAwDNH,EAAAA,EAAAA,KAAA,MACE,GAAM,kDACJ,mDACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,mmDAkDNH,EAAAA,EAAAA,KAAA,MACE,GAAM,kCACJ,mCACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,qgEAiEV,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/sample_apps/code_snippets/files.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"app-builder-files-sdk\"\n    }}>{`App Builder Files SDK`}</h1>\n    <h2 {...{\n      \"id\": \"demonstrates-how-to-return-a-list-of-files-stored-with-the-files-sdk\"\n    }}>{`Demonstrates how to return a list of files stored with the Files SDK`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Return a list of files stored with the Files SDK\n *\n * Sample curl request:\n * curl --location --request GET 'https://my-namespace.adobeioruntime.net/api/v1/web/my-app-0.0.1/listfiles'\n * \n * You could add the query param \"path\" to reduce the scope of results within a directory.\n */\nconst { Core, Files } = require('@adobe/aio-sdk')\nconst { errorResponse, stringParameters, checkMissingRequestInputs } = require('../../utils')\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    // check for missing request input parameters and headers\n    const requiredParams = ['path']\n    const requiredHeaders = []\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, requiredHeaders)\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n\n    const files = await Files.init()\n    const fileList = await files.list(params.path)\n    logger.debug(fileList)\n\n    const response = {\n      headers: {},\n      body: {\n        fileList\n      },\n      statusCode: 200\n    }\n\n    // log the response status code\n    logger.info(\\`\\${response.statusCode}: successful request\\`)\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"return-a-presigned-url-of-a-private-file-from-the-files-sdk\"\n    }}>{`Return a presigned URL of a private file from the Files SDK`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Return a presigned URL of a private file from the Files SDK\n *\n * Sample curl request:\n * curl --location --request GET 'https://my-namespace.adobeioruntime.net/api/v1/web/my-app-0.0.1/downloadfile-presigned?fileLocation=/mydir/test.csv'\n */\n\nconst { Core, Files } = require('@adobe/aio-sdk')\nconst { errorResponse, stringParameters, checkMissingRequestInputs } = require('../../utils')\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    // check for missing request input parameters and headers\n    const requiredParams = ['fileLocation']\n    const requiredHeaders = []\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, requiredHeaders)\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n\n    const files = await Files.init()\n    const presignUrl = await files.generatePresignURL(params.fileLocation, { expiryInSeconds: 60 })\n    logger.debug(presignUrl)\n\n    const response = {\n      headers: {},\n      body: {\n        presignUrl\n      },\n      statusCode: 200\n    }\n\n    // log the response status code\n    logger.info(\\`\\${response.statusCode}: successful request\\`)\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"return-a-file-from-the-files-sdk-with-redirect\"\n    }}>{`Return a file from the Files SDK with Redirect`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Return a file from the Files SDK with Redirect\n */\nconst { Core, Files } = require('@adobe/aio-sdk')\nconst { errorResponse, stringParameters, checkMissingRequestInputs } = require('../../utils')\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    // check for missing request input parameters and headers\n    const requiredParams = ['fileLocation']\n    const requiredHeaders = []\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, requiredHeaders)\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n\n    const files = await Files.init()\n    // Generate a presigned URL of the file that is valid for 60 seconds only\n    const presignUrl = await files.generatePresignURL(params.fileLocation, { expiryInSeconds: 60 })\n    logger.debug(presignUrl)\n\n    const response = {\n      headers: { location: presignUrl }, \n      statusCode: 302\n    }\n\n    // log the response status code\n    logger.info(\\`\\${response.statusCode}: successful request\\`)\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"upload-a-file-to-the-files-sdk\"\n    }}>{`Upload a file to the Files SDK`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Upload a file to the Files SDK\n *\n * Sample curl request:\n * curl --location --request POST 'https://my-namespace.adobeioruntime.net/api/v1/web/my-app-0.0.1/uploadfile' \\\\\n * --header 'Content-Type: application/json' \\\\\n * --data-raw '{\n *     \"fileUrl\": \"https://url.of.file\",\n *     \"fileLocation\": \"/mydir/test.csv\"\n * }'\n */\nconst { Core, Files } = require('@adobe/aio-sdk')\nconst fetch = require('node-fetch')\nconst { errorResponse, getBearerToken, stringParameters, checkMissingRequestInputs } = require('../../utils')\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    // check for missing request input parameters and headers\n    const requiredParams = ['fileUrl', 'fileLocation']\n    const requiredHeaders = []\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, requiredHeaders)\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n\n    const originalFile = await fetch(params.fileUrl)\n\n    const files = await Files.init()\n    logger.info('File SDK init done')\n    const fileLocation = params.fileLocation\n    await files.write(fileLocation, originalFile.body)\n    const props = await files.getProperties(fileLocation)\n    logger.debug(JSON.stringify(props))\n\n    const response = {\n      statusCode: 200,\n      body: {}\n    }\n\n    // log the response status code\n    logger.info(\\`\\${response.statusCode}: successful request\\`)\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}