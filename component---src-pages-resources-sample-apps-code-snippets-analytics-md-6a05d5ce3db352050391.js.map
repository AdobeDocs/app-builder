{"version":3,"file":"component---src-pages-resources-sample-apps-code-snippets-analytics-md-6a05d5ce3db352050391.js","mappings":"kTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,8CACJ,gDACJA,EAAAA,EAAAA,KAAA,SAAI,oFACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,6uFAqFV,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/sample_apps/code_snippets/analytics.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"real-time-data-from-adobe-analytics-api-14\"\n    }}>{`Real-Time Data from Adobe Analytics API 1.4`}</h1>\n    <p>{`Demonstrates how to write an action accessing Adobe Analytics Real-time API 1.4`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Demonstrating how to write an action accessing Adobe Analytics Real-time API 1.4\n *\n * Sample curl request:\n * curl --location --request GET 'https://my-namespace.adobeioruntime.net/api/v1/web/my-app-0.0.1/analytics14' \\\\\n * --header 'Authorization: Bearer ey123...' \\\\\n * --header 'x-gw-ims-org-id: some-org-id' \\\\\n * --header 'x-api-key: some-key'\n */\n\nconst fetch = require('node-fetch')\nconst { Core } = require('@adobe/aio-sdk')\nconst { errorResponse, getBearerToken, stringParameters, checkMissingRequestInputs } = require('../utils')\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    // check for missing request input parameters and headers\n    const requiredParams = [/* add required params */]\n    const requiredHeaders = ['Authorization', 'x-gw-ims-org-id', 'x-api-key']\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, requiredHeaders)\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n\n    // extract the user Bearer token from the Authorization header\n    const token = getBearerToken(params)\n\n    // sample payload, please customize according to your report set-up\n    const data = {\n      \"reportDescription\": {\n        \"source\": \"realtime\",\n        \"reportSuiteID\": \"change-me\",\n        \"metrics\": [\n          { \"id\": \"pageviews\" }\n        ],\n        \"elements\": [\n          {\n            \"id\": \"page\",\n            \"search\": { \"keywords\": [ \"product\" ] },\n            \"top\": 200\n          }\n        ],\n        \"dateFrom\": \"-5 minutes\"\n      }\n    }\n    const apiEndpoint = 'https://api.omniture.com/admin/1.4/rest/?method=Report.Run'\n    const headers = {\n      'x-api-key': params.headers['x-api-key'],\n      'Authorization': \\`Bearer \\${token}\\`,\n      'x-ims-org-id': params.headers['x-gw-ims-org-id'],\n      'x-proxy-global-company-id': 'change-me',\n      'Content-Type': 'application/json'\n    }\n\n    const res = await fetch(apiEndpoint, { method: 'POST', headers: headers, body: JSON.stringify(data) })\n    const response = {\n      statusCode: 200,\n      body: {\n        data: await res.json()\n      }\n    }\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}