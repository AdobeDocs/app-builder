{"version":3,"file":"component---src-pages-resources-asset-compute-worker-ps-api-lesson-3-md-542266703bdcf13ef76f.js","mappings":"iTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,yDACJ,2DACJA,EAAAA,EAAAA,KAAA,SAAI,4IACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACb,KAAQ,0CACN,wBAA4B,oRAClCH,EAAAA,EAAAA,KAAA,SAAI,sBAAqBA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACnC,KAAQ,0CACN,yBAA6B,0BAAyBH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACtE,KAAQ,kDACN,qBAAyB,2IAA0IH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,gBAA6B,WAClOH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBACX,mLAONH,EAAAA,EAAAA,KAAA,mBACEA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,cAAc,gIAA+HH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACrK,KAAQ,kDACN,qBAAyB,sCAEjCH,EAAAA,EAAAA,KAAA,SAAI,sBAAqBA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,eAA4B,wBAAuBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,gBAA6B,sDACjKH,EAAAA,EAAAA,KAAA,SAAI,oCAAmCA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,kCAA+C,iEAAgEH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC5L,KAAQ,+FACN,yBAA6B,2CACnCH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,82CAkCNH,EAAAA,EAAAA,KAAA,SAAI,6BAA4BA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,UAAuB,mDAAkDH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,mBAAgC,YAAWH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,kCAA+C,2BACvRH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBACX,8lBAwBNH,EAAAA,EAAAA,KAAA,SAAI,oCACJA,EAAAA,EAAAA,KAAA,SAAI,YAAWA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,kBAA+B,uEAC1EH,EAAAA,EAAAA,KAAA,SAAI,6BAA4BA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,eAA4B,kNACxFH,EAAAA,EAAAA,KAAA,SAAI,gHAA+GA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC7H,KAAQ,gEACN,+BAAmC,yBAG7C,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/asset-compute-worker-ps-api/lesson3.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lesson-3-develop-custom-worker-calling-photoshop-apis\"\n    }}>{`Lesson 3: Develop Custom Worker Calling Photoshop APIs`}</h1>\n    <p>{`Now that you have the development environment set up locally and can run a basic worker, let's enhance it to do something more complex.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/photoshop/\"\n      }}>{`Adobe Photoshop APIs`}</a>{` let you to build plugins and integrations that harness the power of the worldâ€™s best image editing and graphic design software to transform creative workflows for users everywhere. In this Code Lab, you use the Photoshop APIs to generate custom renditions in AEM Assets.`}</p>\n    <p>{`You will need the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aio-lib-files\"\n      }}>{`App Builder Files SDK`}</a>{` to store images, the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aio-lib-photoshop-api\"\n      }}>{`Photoshop API SDK`}</a>{` to call Photoshop APIs, and UUID to generate unique folder names for renditions of different images. Add them as dependencies in your `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"dependencies\": {\n    \"@adobe/aio-lib-photoshop-api\": \"0.0.4-beta.4\",\n    \"@adobe/aio-sdk\": \"^2.3.0\",\n    \"@adobe/asset-compute-sdk\": \"^2.2.1\",\n    \"uuid\": \"^8.0.0\"\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: At the time of writing, Photoshop API SDK is in beta release and its version is constantly changing. Please visit its `}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/adobe/aio-lib-photoshop-api\"\n        }}>{`GitHub repository`}</a>{` to find out the latest version.`}</p>\n    </blockquote>\n    <p>{`Make sure you run `}<inlineCode parentName=\"p\">{`npm install`}</inlineCode>{` after updating the `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` file, so that all the npm modules are installed.`}</p>\n    <p>{`Then update your action code in `}<inlineCode parentName=\"p\">{`actions/<worker-name>/index.js`}</inlineCode>{` to use the Photoshop API SDK. In this example, it calls the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/firefly-services/docs/photoshop/api/photoshop_removeBackground/\"\n      }}>{`Remove Background API`}</a>{` to remove the background of an image.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { worker, SourceCorruptError } = require('@adobe/asset-compute-sdk');\nconst fs = require('fs').promises;\nconst { Files } = require('@adobe/aio-sdk');\nconst Photoshop = require('@adobe/aio-lib-photoshop-api');\nconst { v4: uuid4 } = require('uuid');\n\nexports.main = worker(async (source, rendition, params) => {\n    const files = await Files.init();\n\n    // obtain access token and org ID\n    const accessToken = params.auth && params.auth.accessToken;\n    const orgId = params.auth && params.auth.orgId;\n\n    // init Photoshop SDK client\n    const psClient = await Photoshop.init(orgId, params.apiKey, accessToken, files);\n\n    // create a new directory in aio-lib-files with unique name\n    const imageId = uuid4();\n    const aioSourcePath = \\`\\${imageId}/source.png\\`;\n    const aioRenditionPath = \\`\\${imageId}/rendition.png\\`;\n\n    await files.copy(source.path, aioSourcePath, { localSrc: true });\n\n    // call Photoshop API to do cutout processing, and poll status until it's successful\n    const result = await psClient.createCutout(aioSourcePath, aioRenditionPath);\n    await result.pollUntilDone(1000);\n\n    // download the rendition to local AEM Assets destination\n    await files.copy(aioRenditionPath, rendition.path, { localDest: true });\n\n    // clean up files processing folder in aio-lib-files\n    await files.delete(\\`\\${imageId}/\\`);\n});\n`}</code></pre>\n    <p>{`Because the SDK requires `}<inlineCode parentName=\"p\">{`apiKey`}</inlineCode>{` to be passed in the input params, update your `}<inlineCode parentName=\"p\">{`ext.config.yaml`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`src/dx-asset-compute-worker-1/`}</inlineCode>{` folder to include it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`operations:\n  workerProcess:\n    - type: action\n      impl: dx-asset-compute-worker-1/worker\nhooks:\n  post-app-run: adobe-asset-compute devtool\n  test: adobe-asset-compute test-worker\nactions: actions\nruntimeManifest:\n  packages:\n    dx-asset-compute-worker-1:\n      license: Apache-2.0\n      actions:\n        worker:\n          function: actions/worker/index.js\n          web: 'yes'\n          runtime: 'nodejs:14'\n          limits:\n            concurrency: 10\n          inputs:\n              apiKey: $SERVICE_API_KEY\n          annotations:\n            require-adobe-auth: true\n`}</code></pre>\n    <p>{`Your worker should now be set. `}</p>\n    <p>{`Run the `}<inlineCode parentName=\"p\">{`aio app deploy`}</inlineCode>{` command to deploy your action to test in the development tool UI.`}</p>\n    <p>{`Then execute the command `}<inlineCode parentName=\"p\">{`aio app run`}</inlineCode>{` to test it. In the development tool UI, select an existing image or upload a new one, define the rendition request, and click the Run button. You will see the rendition result with the background removed.`}</p>\n    <p>{`There are various options of other photo magics that you can use to enhance your custom worker. Consult the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/firefly-services/docs/photoshop/\"\n      }}>{`Photoshop API documentation`}</a>{` for further details.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}