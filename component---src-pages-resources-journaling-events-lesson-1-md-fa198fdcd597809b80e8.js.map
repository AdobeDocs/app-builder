{"version":3,"file":"component---src-pages-resources-journaling-events-lesson-1-md-fa198fdcd597809b80e8.js","mappings":"kTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,uDACJ,yDACJA,EAAAA,EAAAA,KAAA,SAAI,8BACJA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAM,2DACrBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAM,wCACrBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAM,gBACrBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAM,oCAEvBH,EAAAA,EAAAA,KAAA,MACE,GAAM,uDACJ,wDACJA,EAAAA,EAAAA,KAAA,SAAI,4QACJA,EAAAA,EAAAA,KAAA,SAAI,2EAA0EA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACxF,KAAQ,8BACN,iBAAqB,qBAAoBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,sBAAmC,+BAA8BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,iBAA8B,2BACtMH,EAAAA,EAAAA,KAAA,MACE,GAAM,sCACJ,uCACJA,EAAAA,EAAAA,KAAA,SAAI,2HACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBACX,mDAENH,EAAAA,EAAAA,KAAA,SAAI,6BAA4BA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC1C,KAAQ,8BACN,iBAAqB,MAC3BH,EAAAA,EAAAA,KAAA,MACE,GAAM,0CACJ,2CACJA,EAAAA,EAAAA,KAAA,SAAI,mDAAkDA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAChE,KAAQ,4BACN,oCAAwC,uEAC9CH,EAAAA,EAAAA,KAAA,MACE,GAAM,oCACJ,qCACJA,EAAAA,EAAAA,KAAA,SAAI,WAAUA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACxB,KAAQ,yBACN,gBAAoB,uEAC1BH,EAAAA,EAAAA,KAAA,SAAI,SAAQA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,mBAAgC,gCACxEH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,iBACX,qyCA4CNH,EAAAA,EAAAA,KAAA,SAAI,gCAA+BA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,kBAA+B,kEAAiEH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,8CAA2D,gDAA+CH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,4BAAyC,SAAQH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,6BAA0C,MACxbH,EAAAA,EAAAA,KAAA,SAAI,2KAGR,CAEAN,EAAWU,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/journaling-events/lesson1.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lesson-1-create-an-event-provider-using-app-builder\"\n    }}>{`Lesson 1: Create an Event Provider using App Builder`}</h1>\n    <p>{`In this lesson, we will :`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create an event provider using an App Builder template`}</li>\n      <li parentName=\"ul\">{`Register the App as event provider `}</li>\n      <li parentName=\"ul\">{`Fire Events`}</li>\n      <li parentName=\"ul\">{`Schedule cron jobs with alarms`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"create-an-event-provider-using-app-builder-template\"\n    }}>{`Create an event provider using App Builder template`}</h2>\n    <p>{`To provide an end-to-end solution, for this Code Lab, we need an event provider to send events to the Journaling API, at a rate that is configurable to help with testing. We will use the OpenWhisk Alarms Package in an App Builder application to create cron jobs. `}</p>\n    <p>{`First, we will create a new App Builder App from a template, following `}<a parentName=\"p\" {...{\n        \"href\": \"../event-driven/lesson1.md\"\n      }}>{`this Code Lab`}</a>{`. Be sure to add `}<inlineCode parentName=\"p\">{`I/O management API`}</inlineCode>{` in the console and choose `}<inlineCode parentName=\"p\">{`publish-event`}</inlineCode>{` in the CLI template. `}</p>\n    <h2 {...{\n      \"id\": \"register-the-app-as-event-provider\"\n    }}>{`Register the app as event provider`}</h2>\n    <p>{`To use the CLI to register the app as an event provider, we need to install the Adobe I/O Event CLI plugin, like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install -g @adobe/aio-cli-plugin-events\n`}</code></pre>\n    <p>{`Then follow the steps in `}<a parentName=\"p\" {...{\n        \"href\": \"../event-driven/lesson2.md\"\n      }}>{`this Code Lab`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"fire-events-and-set-up-to-consume-them\"\n    }}>{`Fire events and set up to consume them`}</h2>\n    <p>{`Now we can arrange to fire events by following `}<a parentName=\"p\" {...{\n        \"href\": \"../event-driven/index.md\"\n      }}>{`the procedure from this Code Lab`}</a>{`, making sure to choose Journaling API as the way to consume them.`}</p>\n    <h2 {...{\n      \"id\": \"scheduling-cron-jobs-with-alarms\"\n    }}>{`Scheduling cron jobs with alarms`}</h2>\n    <p>{`Follow `}<a parentName=\"p\" {...{\n        \"href\": \"../cron-jobs/index.md\"\n      }}>{`this CodeLab`}</a>{` to fire events automatically by using the runtime alarms package.`}</p>\n    <p>{`Your `}<inlineCode parentName=\"p\">{`app.config.yaml`}</inlineCode>{` should now look like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`application:\n  actions: actions\n  web: web-src\n  runtimeManifest:\n    packages:\n      my-app:\n        license: Apache-2.0\n        actions:\n          generic:\n            function: actions/generic/index.js\n            web: 'yes'\n            runtime: 'nodejs:14'\n            inputs:\n              LOG_LEVEL: debug\n            annotations:\n              require-adobe-auth: true\n              final: true\n          publish-events:\n            function: actions/publish-events/index.js\n            web: 'yes'\n            runtime: 'nodejs:14'\n            inputs:\n              LOG_LEVEL: debug\n              apiKey: $SERVICE_API_KEY\n              providerId: $PROVIDER_ID\n              eventCode: $EVENT_CODE\n              client_id: $CLIENT_ID\n              client_secret: $CLIENT_SECRET\n              technical_account_email: $TECH_ACCOUNT_EMAIL\n              technical_account_id: $TECH_ACCOUNT_ID\n              ims_org_id: $IMS_ORG_ID\n              private_key: $PRIVATE_KEY\n            annotations:\n              final: true\n        Triggers:\n          everyMin:\n            feed: /whisk.system/alarms/interval\n            inputs:\n              minutes: 1\n          rules:\n            everyMinRule:\n              trigger: everyMin\n              action: publish-events\n`}</code></pre>\n    <p>{`To test the action, execute `}<inlineCode parentName=\"p\">{`aio app deploy`}</inlineCode>{` in the VSCode terminal. Once the deployment is finished, run `}<inlineCode parentName=\"p\">{`aio rt action invoke your-app-name/generic`}</inlineCode>{`, and then verify its result and logs using `}<inlineCode parentName=\"p\">{`aio rt activation get ID`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`aio rt activation logs ID`}</inlineCode>{`.`}</p>\n    <p>{`If successful, the event provider should automatically send the events, you should be able to use Postman or cURL to verify that the Journaling API is receiving them. `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}