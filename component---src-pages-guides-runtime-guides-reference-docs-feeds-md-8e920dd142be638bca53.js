"use strict";(self.webpackChunkadobe_developer_app_builder=self.webpackChunkadobe_developer_app_builder||[]).push([[6647],{46331:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return s},default:function(){return p}});var a=n(58168),i=n(80045),r=(n(88763),n(15680)),o=n(83407);const d=["components"],s={},m={_frontmatter:s},l=o.A;function p(e){let{components:t}=e,n=(0,i.A)(e,d);return(0,r.mdx)(l,(0,a.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"using-feeds"},"Using Feeds"),(0,r.mdx)("p",null,"Feeds are streams of events. The difference between ",(0,r.mdx)("a",{parentName:"p",href:"triggersrules.md",title:"Using Triggers and Rules"},"triggers")," and feeds is:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"Triggers")," are a way to classify events: each defines a type of event and is fired when that event is received by Runtime. Triggers are linked to actions by rules; each rule links a trigger to a single action."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"Feeds")," are streams of events that are all handled by the same trigger. Each feed is controlled by a ",(0,r.mdx)("em",{parentName:"li"},"feed action")," that manages the stream: creating, deleting, pausing or resuming it as needed. In this way, a feed controls the flow of input to a trigger. Feed actions use a REST API to interact with external services that produce the events to which triggers are set to respond.")),(0,r.mdx)("h2",{id:"creating-feeds-feed-actions"},"Creating feeds: feed actions"),(0,r.mdx)("p",null,"To create a feed, you first need a feed action. A feed action is an action like any other, but to qualify as a feed action it needs to accept these parameters:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"lifecycleEvent:")," passes in commands to control the feed: ",(0,r.mdx)("inlineCode",{parentName:"li"},"CREATE"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"READ"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"DELETE"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"PAUSE"),", OR ",(0,r.mdx)("inlineCode",{parentName:"li"},"UNPAUSE")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"triggerName:")," provides the fully qualified name of the trigger to associate with this feed"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"authKey:")," the Basic auth credentials of the user who owns the trigger given in ",(0,r.mdx)("inlineCode",{parentName:"li"},"triggerName"))),(0,r.mdx)("p",null,"The feed action can take any other parameters you choose; thesy should include any parameters needed to connect to the event source and manage the feed."),(0,r.mdx)("p",null,"Once you have a feed action, create the feed when you create the trigger itself by using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"--feed")," parameter. For example, assume you want to set up a feed for receiving updates to the user's location coming from your mobile app, and have created a feed action named ",(0,r.mdx)("inlineCode",{parentName:"p"},"userLocChange")," in a package in your namespace called ",(0,r.mdx)("inlineCode",{parentName:"p"},"userLoc"),". To create the feed for managing location updates, you could issue the following command in the CLI:"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"aio rt:trigger:create trigLocUpdate --feed userLoc/userLocChange <optional parameters for the feed action>")),(0,r.mdx)("p",null,"This command creates a trigger named ",(0,r.mdx)("inlineCode",{parentName:"p"},"trigLocUpdate"),".  Then do something like this:"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"aio rt:action:invoke userLoc/userLocChange --param lifecycleEvent CREATE --param triggerName trigLocUpdate --param authKey <yourauthKey> --param <optional parameters>")),(0,r.mdx)("p",null,"This invokes the feed action ",(0,r.mdx)("inlineCode",{parentName:"p"},"userLocChange"),", which sets up the stream of events from your mobile app aimed at the trigger ",(0,r.mdx)("inlineCode",{parentName:"p"},"trigLocUpdate"),"."),(0,r.mdx)("p",null,"You can use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"--feed")," parameter to execute similar functions on feed actions within the ",(0,r.mdx)("inlineCode",{parentName:"p"},"aio rt:trigger:delete"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"aio rt:trigger:update"),", and ",(0,r.mdx)("inlineCode",{parentName:"p"},"aio rt:trigger:get")," commands."),(0,r.mdx)("h2",{id:"feed-implementation-patterns"},"Feed implementation patterns"),(0,r.mdx)("p",null,"You can create a feed according to several different architectural patterns. Three good choices are:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"Hooks:")," This is the easiest option, if your event source offers a webhook facility. Simply set up the webhook to send an HTML POST directly to a URL to fire the trigger. This works best for low-frequency events."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"Polling:")," This is good for managing a regularly scheduled event, so long as it's not too frequent. Set up the feed action to poll an endpoint periodically to fetch new data."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"Connections:")," Sometimes, the volume and frequency of events makes it most efficient to set up a persistent connection. But since Runtime is architected as a REST service, a invocations of an action are destroyed as soon as they're executed; in other words, Runtime is by nature not persistent. One option is to set up an external service that maintains a persistent connection with your event source, and arrange for that service to fire events at your feed in Runtime.")),(0,r.mdx)("h2",{id:"next-steps"},"Next steps"),(0,r.mdx)("p",null,"Return to the ",(0,r.mdx)("a",{parentName:"p",href:"index.md"},"Runtime Reference Documentation Index"),"."),(0,r.mdx)("p",null,"Return to the ",(0,r.mdx)("a",{parentName:"p",href:"../../index.md"},"Guides Index"),"."))}p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-runtime-guides-reference-docs-feeds-md-8e920dd142be638bca53.js.map