{"version":3,"file":"component---src-pages-resources-todo-app-lesson-2-md-b4c784d374e42cba4966.js","mappings":"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","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/todo-app/lesson2.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lesson-2-set-up-runtime-actions\"\n    }}>{`Lesson 2: Set up Runtime Actions`}</h1>\n    <p>{`In this lesson, we'll set up the Runtime actions to handle the CRUD operations. The will be able to handle multiple to-do lists, and each  can have several to-do items.`}</p>\n    <h2 {...{\n      \"id\": \"global-configuration-file\"\n    }}>{`Global configuration file`}</h2>\n    <p>{`To avoid long to-do lists, we'll define a `}<inlineCode parentName=\"p\">{`MAX_TODO_ITEMS`}</inlineCode>{` value within a global configuration file that we will import from the `}<inlineCode parentName=\"p\">{`actions`}</inlineCode>{` folder and also from the `}<inlineCode parentName=\"p\">{`web-src`}</inlineCode>{` folder.\nWe'll create the file at the root of the App Builder App and name it `}<inlineCode parentName=\"p\">{`defaults.json`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"MAX_TODO_ITEMS\": 10\n}\n`}</code></pre>\n    <p>{`Then, import the value in our action `}<inlineCode parentName=\"p\">{`todolist/index.js`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { MAX_TODO_ITEMS } = require('../../defaults.json');\n`}</code></pre>\n    <p>{`In the next lesson, we'll also show how to import the value from the `}<inlineCode parentName=\"p\">{`web-src`}</inlineCode>{` folder.`}</p>\n    <h2 {...{\n      \"id\": \"install-aio-lib-state\"\n    }}>{`Install aio-lib-state`}</h2>\n    <p>{`We'll be using `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aio-lib-state\"\n      }}>{`aio-lib-state`}</a>{` to store the todo items, so first we install the dependency with:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm i --save @adobe/aio-lib-state\n`}</code></pre>\n    <p>{`Then we import it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const stateLib = require('@adobe/aio-lib-state');\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"main-function\"\n    }}>{`Main function`}</h2>\n    <p>{`We'll setup the `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Create,_read,_update_and_delete\"\n      }}>{`CRUD`}</a>{` operations inside the main function. `}</p>\n    <h3 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h3>\n    <p>{`First, we define an `}<inlineCode parentName=\"p\">{`operation`}</inlineCode>{` parameter and make it required: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const requiredParams = ['operation']; \n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`operation`}</inlineCode>{` parameter can take four possible values: `}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`create`}</inlineCode>{` to create an empty to-do list`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`read`}</inlineCode>{` to read a to-do list`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`update`}</inlineCode>{` to update a to-do list with a todo item `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`delete`}</inlineCode>{` to delete a to-do list`}</li>\n    </ul>\n    <p>{`We'll also use additional optional parameters: `}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`name`}</inlineCode>{` to identify a list`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`todo`}</inlineCode>{` to identify a to-do inside a list  `}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { operation, name, todo } = params;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"crud-operations\"\n    }}>{`CRUD operations`}</h3>\n    <p>{`Next, we'll initialize the state library and retrieve a `}<inlineCode parentName=\"p\">{`todolist`}</inlineCode>{` value with `}<inlineCode parentName=\"p\">{`state.get()`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const state = await stateLib.init();\n\nlet todoList = await state.get(\\`todolist\\`);\nif (todoList?.value) {\n  todoList = todoList.value;\n}\nelse {\n  todoList = [];\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`todolist`}</inlineCode>{` will hold all to-do listsobjects and is an empty array by default.`}</p>\n    <p>{`Finally, we'll define which operation to perform based on the value of `}<inlineCode parentName=\"p\">{`operation`}</inlineCode>{` and return the response:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`let body = {};\nswitch (operation) {\n  case 'create':\n    // Find the todo list by name\n    if (!todoList.find(({ name: todoListName }) => todoListName === name)) {\n      // If none found, create an empty list with the given name\n      todoList.unshift({\n        name,\n        todos: []\n      });\n\n      // Store the new list in the state storage with no expiry time\n      await state.put(\\`todolist\\`, todoList, { ttl: -1 });\n\n      body.message = \\`\"\\${name}\" added.\\`;\n    } else {\n      return errorResponse(400, \\`\"\\${name}\" already exists.\\`, logger);\n    }\n    break;\n\n  case 'read':\n    // Simply return the todo lists\n    body.todoList = todoList;\n    break;\n\n  case 'update':\n    if (todo) {\n      // Find the todo list by name\n      const foundTodoList = todoList.find(({ name: todoListName }) => todoListName === name);\n      if (foundTodoList) {\n        // Find the todo item by id\n        const todoIndex = foundTodoList.todos.findIndex(({ id }) => id === todo.id);\n        if (todoIndex !== -1) {\n          // Update the todo item\n          foundTodoList.todos[todoIndex] = todo;\n          body.message = \\`Todo \"\\${todo.id}\" updated in \"\\${name}\".\\`;\n\n          await state.put(\\`todolist\\`, todoList, { ttl: -1 });\n        } else {\n          // Create a new todo item\n          if (foundTodoList.todos.length < MAX_TODO_ITEMS) {\n            foundTodoList.todos.unshift(todo);\n            body.message = \\`Todo \"\\${todo.id}\" added to \"\\${name}\".\\`;\n\n            await state.put(\\`todolist\\`, todoList, { ttl: -1 });\n          } else {\n            return errorResponse(400, \\`Max \\${MAX_TODO_ITEMS} todos reached for \"\\${name}\".\\`, logger);\n          }\n        }\n      } else {\n        return errorResponse(400, \\`\\${name} not found.\\`, logger);\n      }\n    } else {\n      return errorResponse(400, \\`Todo is missing.\\`, logger);\n    }\n    break;\n\n  case 'delete':\n    // Filter out the todo list to delete by name\n    const updatedTodoList = todoList.filter(({ name: todoListName }) => todoListName !== name);\n\n    await state.put(\\`todolist\\`, updatedTodoList, { ttl: -1 });\n\n    body.message = \\`\"\\${name}\" todo list deleted.\\`;\n    break;\n\n  default:\n    return errorResponse(400, 'CRUD operation not found', logger);\n}\n\nreturn {\n  statusCode: 200,\n  body\n};\n`}</code></pre>\n    <p>{`For every operation except `}<inlineCode parentName=\"p\">{`read`}</inlineCode>{`, we are using the `}<inlineCode parentName=\"p\">{`state.put()`}</inlineCode>{` function to update the `}<inlineCode parentName=\"p\">{`todolist`}</inlineCode>{` value. We also set the time to live option to `}<inlineCode parentName=\"p\">{`-1`}</inlineCode>{` so that the value of `}<inlineCode parentName=\"p\">{`todolist`}</inlineCode>{` won't expire.`}</p>\n    <p>{`See the full action code `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/AdobeDocs/adobeio-samples-todoapp/blob/master/actions/todolist/index.js\"\n      }}>{`here`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}