"use strict";(self.webpackChunkadobe_developer_app_builder=self.webpackChunkadobe_developer_app_builder||[]).push([[4697],{56304:function(e,n,o){o.r(n),o.d(n,{_frontmatter:function(){return l},default:function(){return u}});var t=o(58168),a=o(80045),r=(o(88763),o(15680)),i=o(83407);const s=["components"],l={},p={_frontmatter:l},d=i.A;function u(e){let{components:n}=e,o=(0,a.A)(e,s);return(0,r.mdx)(d,(0,t.A)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"lesson-2-configure-the-app"},"Lesson 2: Configure the App"),(0,r.mdx)("h1",{id:"lesson-2-configure-the-app-1"},"Lesson 2: Configure the App"),(0,r.mdx)("p",null,"As you log in when creating the application, most of the App Builder credentials get collected in your ",(0,r.mdx)("inlineCode",{parentName:"p"},".env")," file. However, using the Developer tool requires additional credentials."),(0,r.mdx)("p",null,"The Developer tool used to test custom applications with the actual Asset Compute service requires a cloud storage container for hosting test files and for receiving and displaying renditions generated by applications."),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},"Note: This is separate from the cloud storage of Adobe Experience Manager as a Cloud Service. It applies only to development and testing using the Asset Compute Developer tool.")),(0,r.mdx)("p",null,"You can use either S3 or Azure storage for this purpose by adding credentials of (only) one storage solution."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"# S3 credentials\nS3_BUCKET=\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_REGION=\n\n# Azure Storage credentials\nAZURE_STORAGE_ACCOUNT=\nAZURE_STORAGE_KEY=\nAZURE_STORAGE_CONTAINER_NAME=\n")),(0,r.mdx)("p",null,"Then add the absolute path to the private key file created while adding services to your App Builder Project:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},"ASSET_COMPUTE_PRIVATE_KEY_FILE_PATH=\n")),(0,r.mdx)("p",null,"Finally, download the file from the Adobe Developer Console. Go to the root of the workspace you are using and click on “Download All” in the upper-right corner. The file is downloaded with ",(0,r.mdx)("inlineCode",{parentName:"p"},"<namespace>-<workspace>.json")," as the filename. Rename it to ",(0,r.mdx)("inlineCode",{parentName:"p"},"console.json")," and move it in the root folder of your project."),(0,r.mdx)("p",null,"Once all the credentials are properly configured, you can execute the application with the Asset Compute Developer Tool by the command ",(0,r.mdx)("inlineCode",{parentName:"p"},"aio app run"),". This deploys the action to Adobe I/O Runtime and starts the development tool, available at ",(0,r.mdx)("inlineCode",{parentName:"p"},"http://localhost:9000"),", on your local machine. You can then upload a test image, specify the rendition request, and then run the test to see the rendition result. Here is an example rendition request:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'"renditions": [\n    {\n        "worker": "https://1234-projectA-workspaceB.adobeioruntime.net/api/v1/web/example-custom-worker-0.0.1/worker",\n        "name": "custom_rendition.png"\n    }\n]\n')),(0,r.mdx)("p",null,"Looking at the action code in ",(0,r.mdx)("inlineCode",{parentName:"p"},"actions/<worker-name>/index.js"),", you can see it simply copies the source file to generate a new rendition."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-javascript"},"const { worker, SourceCorruptError } = require('@adobe/asset-compute-sdk');\nconst fs = require('fs').promises;\n\nexports.main = worker(async (source, rendition) => {\n    await fs.copyFile(source.path, rendition.path);\n});\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-resources-asset-compute-worker-ps-api-lesson-2-md-31fd9650bd399dda053c.js.map