"use strict";(self.webpackChunkadobe_developer_app_builder=self.webpackChunkadobe_developer_app_builder||[]).push([[9765],{3083:function(e,n,r){r.r(n),r.d(n,{_frontmatter:function(){return u},default:function(){return m}});var a=r(58168),t=r(80045),s=(r(88763),r(15680)),o=r(83407);const i=["components"],u={},l={_frontmatter:u},p=o.A;function m(e){let{components:n}=e,r=(0,t.A)(e,i);return(0,s.mdx)(p,(0,a.A)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"app-builder-state-sdk"},"App Builder State SDK"),(0,s.mdx)("h2",{id:"read-a-value-by-key-from-the-state-sdk"},"Read a value by key from the State SDK"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Read a value by key from the State SDK\n *\n * Sample curl request:\n * curl --location --request GET 'https://my-namespace.adobeioruntime.net/api/v1/web/my-app-0.0.1/state-read?key=name'\n */\nconst { Core, State } = require('@adobe/aio-sdk')\nconst { errorResponse, stringParameters, checkMissingRequestInputs } = require('../../utils')\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    // check for missing request input parameters and headers\n    const requiredParams = ['key']\n    const requiredHeaders = []\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, requiredHeaders)\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n\n    const state = await State.init()\n\n    const valueObj = await state.get(params.key)\n    let value = null\n    if (valueObj){\n      value = valueObj.value\n    }\n    logger.debug(`value=${value}`)\n\n    const response = {\n      statusCode: 200,\n      body: {\n        key: params.key,\n        value\n      }\n    }\n\n    // log the response status code\n    logger.info(`${response.statusCode}: successful request`)\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n")),(0,s.mdx)("h2",{id:"write-a-key-value-pair-into-the-state-sdk"},"Write a key-value pair into the State SDK"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Write a key-value pair into the State SDK\n *\n * Sample curl request:\n * curl --location --request POST 'https://my-namespace.adobeioruntime.net/api/v1/web/my-app-0.0.1/state-write' \\\n * --header 'Content-Type: application/json' \\\n * -- data-raw '{\n *     \"key\": \"name\",\n *     \"value\": \"James Bond\"\n * }'\n */\nconst { Core, State } = require('@adobe/aio-sdk')\nconst { errorResponse, stringParameters, checkMissingRequestInputs } = require('../../utils')\n\n// main function that will be executed by Adobe I/O Runtime\nasync function main (params) {\n  // create a Logger\n  const logger = Core.Logger('main', { level: params.LOG_LEVEL || 'info' })\n\n  try {\n    // 'info' is the default level if not set\n    logger.info('Calling the main action')\n\n    // log parameters, only if params.LOG_LEVEL === 'debug'\n    logger.debug(stringParameters(params))\n\n    // check for missing request input parameters and headers\n    const requiredParams = ['key', 'value']\n    const requiredHeaders = []\n    const errorMessage = checkMissingRequestInputs(params, requiredParams, requiredHeaders)\n    if (errorMessage) {\n      // return and log client errors\n      return errorResponse(400, errorMessage, logger)\n    }\n\n    const state = await State.init()\n    const val = await state.get(params.key)\n    let result\n    // if key already exists, return its value\n    if (val != null) {\n      result = `reading ${params.key}=${val.value}`\n    } \n    // else, save the k-v pair\n    else {\n      await state.put(params.key, params.value)\n      result = `writing ${params.key}=${params.value}`\n    }\n\n    logger.debug(result)\n\n    const response = {\n      statusCode: 200,\n      body: {\n        key: params.key,\n        value: params.value,\n        message: result\n      }\n    }\n\n    // log the response status code\n    logger.info(`${response.statusCode}: successful request`)\n    return response\n  } catch (error) {\n    // log any server errors\n    logger.error(error)\n    // return with 500\n    return errorResponse(500, 'server error', logger)\n  }\n}\n\nexports.main = main\n")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-resources-sample-apps-code-snippets-state-md-3496a668984e1819bf7b.js.map