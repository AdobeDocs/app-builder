{"version":3,"file":"component---src-pages-guides-runtime-guides-throughput-tuning-md-128dbd7f632bfc694c93.js","mappings":"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","sources":["webpack://adobe-developer-app-builder/./src/pages/guides/runtime_guides/throughput_tuning.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"throughput-tuning\"\n    }}>{`Throughput Tuning`}</h1>\n    <h2 {...{\n      \"id\": \"containers\"\n    }}>{`Containers`}</h2>\n    <h3 {...{\n      \"id\": \"setting-concurrency\"\n    }}>{`Setting concurrency`}</h3>\n    <p>{`The main instrument for tuning how rapidly actions can be executed is the value you set for `}<inlineCode parentName=\"p\">{`action/container concurrency`}</inlineCode>{`. This is not related to the concurrent value per namespace or minuteRate value, although these two enforce an upper limit on actions executed per minute in your namespace.`}</p>\n    <p>{`The default `}<inlineCode parentName=\"p\">{`action/container concurrency`}</inlineCode>{` value is `}<inlineCode parentName=\"p\">{`200`}</inlineCode>{` invocations of an action in the same container. If, for example, you plan to execute a `}<inlineCode parentName=\"p\">{`HelloWorld`}</inlineCode>{` action 100 times, either simultaneously or within minutes, the default value (`}<inlineCode parentName=\"p\">{`200`}</inlineCode>{`) means that the system will use one container rather than as many as 100.`}</p>\n    <p>{`This helps avoid cold-start issues. When the system has no containers left, it creates new ones - \"cold starts\" that add a lot of latency to your application.`}</p>\n    <p>{`You can set `}<inlineCode parentName=\"p\">{`action/container concurrency`}</inlineCode>{` to any value between `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`500`}</inlineCode>{`. Here, the limit is set to `}<inlineCode parentName=\"p\">{`100`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:action:create actionName fileName.js -c 100\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"concurrency-considerations\"\n    }}>{`Concurrency considerations`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Containers are kept warm after for 5 minutes after an invocation finishes. For those 5 minutes, it is highly unlikely (p<.01) that invoking the same action will require a cold start.`}</li>\n      <li parentName=\"ol\">{`Experiment with the value you set for concurrency limits. The default, `}<inlineCode parentName=\"li\">{`200`}</inlineCode>{`, is a good place to start, but a smaller or a larger value may be better depending on how much memory and other resources your action consumes.  `}</li>\n      <li parentName=\"ol\">{`Be sure your code is designed to work when executed in parallel. For example, avoid using global variables to store values that may differ between invocations.`}</li>\n      <li parentName=\"ol\">{`If an action works on a large data set that is not different from one invocation to another, a global variable can maximize the chances that the next execution can use it. But your code should handle the condition in which the variable is not initialized.`}</li>\n      <li parentName=\"ol\">{`It is not guaranteed that all invocations will use the same container. In case of errors, for example, the existing container is destroyed and a new one created.`}</li>\n      <li parentName=\"ol\">{`If your action code consumes a large amount of memory, you may need to set concurrency to a lower value to avoid exceeding the container's memory limit.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"using-pre-warmed-containers\"\n    }}>{`Using pre-warmed containers`}</h3>\n    <p>{`A second way avoid cold-starts and minimize latency is to create actions that use the default Node version, and a memory settings of `}<inlineCode parentName=\"p\">{`256MB`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`512MB`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`1024MB`}</inlineCode>{`. `}</p>\n    <p>{`The system has a pool of \"pre-warmed\" containers it will use for any incoming call that can't be sent to a running container - so long as the action matches the pre-warmed container's Node version and memory setting. If it does, time will still be spent for injecting your action code, but not for creating a container first. If it doesn't, your action will wait while the system creates a new container.`}</p>\n    <h2 {...{\n      \"id\": \"caching-responses\"\n    }}>{`Caching responses`}</h2>\n    <p>{`In addition to optimizing the use of containers, caching action responses helps improve throughput. For the time a cache is valid, invocations of the action will not increase the `}<inlineCode parentName=\"p\">{`minuteRate`}</inlineCode>{` counter or concurrent action invocations per namespace. This is because the action is not actually executed: the system serves the result from the cache.`}</p>\n    <p>{`Use the Cache-Control directive to configure the cache. Here is an example of an action that sets the cache with a Time to Live of `}<inlineCode parentName=\"p\">{`30 minutes`}</inlineCode>{`. In the response object you'll find an entry with `}<inlineCode parentName=\"p\">{`X-Cache: HIT`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`X-Cache: MISS`}</inlineCode>{`, depending on whether the answer was returned from the cache or not. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`function main(args) {\n   return {\n       body: \"OK\",\n       statusCode: 200,\n       headers: {\n           \"Cache-Control\": \"max-age=1800\"\n       }\n   }\n}\n`}</code></pre>\n    <p>{`One way to verify whether a response is returned from the cache or not is to check for this header:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`X-GW-Cache: HIT\n`}</code></pre>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Encoded responses can't be cached, so the `}<inlineCode parentName=\"p\">{`Content-Encoding`}</inlineCode>{` response header must be empty to cache responses. `}</p>\n    <h3 {...{\n      \"id\": \"vary-header\"\n    }}>{`Vary header`}</h3>\n    <p>{`The caching layer supports the use of `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary\"\n      }}>{`Vary header`}</a>{` to cache based on header fields as well as on URL and query parameters.`}</p>\n    <p>{`This action responds to certain header fields while doing a complex calculation:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`curl -H \"storeId: 1234\" https://runtime-namespace-1.\nadobeioruntime.net/api/v1/web/store?query={products\n(pageSize: 10,filter:{ id:{ eq:\"abcedefg\"}}){items{name}}}\\`\n`}</code></pre>\n    <p>{`It could produce this response:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`HTTP/1.1 200 OK\nContent-Type: application/json\nVary: storeId\nCache-Control: max-age=120\nX-GW-Cache: MISS\n\n{\"someBigData\" : [\"array\"]}\n`}</code></pre>\n    <p>{`This response would add the `}<inlineCode parentName=\"p\">{`storeId`}</inlineCode>{` to the cache key, so that subsequent requests with the same `}<inlineCode parentName=\"p\">{`storeId`}</inlineCode>{` in their headers would create a `}<inlineCode parentName=\"p\">{`HIT`}</inlineCode>{`, up to the limits imposed by the cache control header settings. Any time the value varied, it would be a `}<inlineCode parentName=\"p\">{`MISS`}</inlineCode>{`, and would be stored under a new key with new cache control directives.`}</p>\n    <h2 {...{\n      \"id\": \"next-step\"\n    }}>{`Next step`}</h2>\n    <p>{`Return to `}<a parentName=\"p\" {...{\n        \"href\": \"../index.md\"\n      }}>{`Guides Index`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","mdx","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","_objectWithoutProperties","_excluded","_extends","mdxType","parentName","slots","isMDXComponent"],"sourceRoot":""}