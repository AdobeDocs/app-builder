{"version":3,"file":"component---src-pages-resources-barcode-reader-test-md-a8d84301cbc83c0ccb80.js","mappings":"kTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAHgC,WACjCC,GAEDD,EADIE,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,wCACJ,0CACJA,EAAAA,EAAAA,KAAA,SAAI,oCAAmCA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,gBAA6B,WAAUH,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IACpH,KAAQ,sBACN,QAAY,wEAClBH,EAAAA,EAAAA,KAAA,MACE,GAAM,cACJ,eACJA,EAAAA,EAAAA,KAAA,SAAI,UAASA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,gBAA6B,kCAAiCH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,mBAAgC,sIACrFH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,WAAwB,8CAClIH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,moBA+BNH,EAAAA,EAAAA,KAAA,SAAI,sJACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,oGAINH,EAAAA,EAAAA,KAAA,SAAI,yFAAwFA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,gBAA6B,gDAA+CH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,oBAAiC,iBACjQH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,sNAONH,EAAAA,EAAAA,KAAA,SAAI,2FAA0FA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,gBAA6B,SAAQH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,QAAqB,2BAA0BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,mBAAgC,mCACtSH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,kUASNH,EAAAA,EAAAA,KAAA,SAAI,4FACJA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,oaAcNH,EAAAA,EAAAA,KAAA,SAAI,8EAA6EA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,SAAsB,2BACnIH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,6QAUNH,EAAAA,EAAAA,KAAA,SAAI,iCAAgCA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,gBAA6B,iCAAgCH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,gBAA6B,+EACtLH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,wEAENH,EAAAA,EAAAA,KAAA,SAAI,+FACJA,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,IAChB,UAAa,4BACb,MAAS,CACP,SAAY,WACZ,QAAW,QACX,WAAc,OACd,YAAe,OACf,SAAY,WAEZ,YACFH,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OACf,UAAa,qCACb,MAAS,CACP,cAAiB,UACjB,SAAY,WACZ,OAAU,IACV,KAAQ,IACR,QAAW,QACX,WAAc,oBACd,cAAiB,UAEV,QACfH,EAAAA,EAAAA,KAAA,WAASG,WAAW,QAAQ,gBACpBH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,UACnB,OAAU,CAAC,kFAAmF,kFAAmF,oFACjL,MAAS,oCACT,KAAQ,eACG,gBACXH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,UACnB,OAAU,CAAC,iFAAkF,iFAAkF,mFAC/K,MAAS,oCACT,KAAQ,cACG,gBACXH,EAAAA,EAAAA,KAAA,OAAKG,WAAW,UAChB,UAAa,0BACb,IAAO,4EACP,IAAO,aACP,MAAS,aACT,QAAW,OACX,MAAS,CACP,MAAS,OACT,OAAU,OACV,OAAU,IACV,cAAiB,SACjB,SAAY,WACZ,QAAW,IACX,WAAc,eACd,MAAS,UACT,UAAa,+BACb,IAAO,IACP,KAAQ,OAEF,cACC,UACP,MACVH,EAAAA,EAAAA,KAAA,MACE,GAAM,oBACJ,qBACJA,EAAAA,EAAAA,KAAA,MACE,GAAM,sBACJ,qBACJA,EAAAA,EAAAA,KAAA,SAAI,qKACaA,EAAAA,EAAAA,KAAA,KAAGG,WAAW,IAC3B,KAAQ,4DACN,6BAAiC,wDACvCH,EAAAA,EAAAA,KAAA,SAAI,8CAA6CA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,cAA2B,8DAA6DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,6BAA0C,iBAC3OH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,wLAKNH,EAAAA,EAAAA,KAAA,SAAI,sDAAqDA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,mFAAgG,+DAErLH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,+WAMNH,EAAAA,EAAAA,KAAA,SAAI,kGAAiGA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,SAAsB,yCACvJH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,yUAWNH,EAAAA,EAAAA,KAAA,SAAI,iGAAgGA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,SAAsB,gHACtJH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,uBACX,4kBAsBNH,EAAAA,EAAAA,KAAA,SAAI,wDAAuDA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,eAA4B,UAASH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAK,gBAA6B,6CACrLH,EAAAA,EAAAA,KAAA,UAAGA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,IAChB,UAAa,4BACb,MAAS,CACP,SAAY,WACZ,QAAW,QACX,WAAc,OACd,YAAe,OACf,SAAY,UAEZ,YACFH,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OACf,UAAa,qCACb,MAAS,CACP,cAAiB,UACjB,SAAY,WACZ,OAAU,IACV,KAAQ,IACR,QAAW,QACX,WAAc,oBACd,cAAiB,UAEV,QACfH,EAAAA,EAAAA,KAAA,WAASG,WAAW,QAAQ,gBACpBH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,UACnB,OAAU,CAAC,iFAAkF,iFAAkF,kFAC/K,MAAS,kCACT,KAAQ,eACG,gBACXH,EAAAA,EAAAA,KAAA,UAAQG,WAAW,UACnB,OAAU,CAAC,gFAAiF,gFAAiF,iFAC7K,MAAS,kCACT,KAAQ,cACG,gBACXH,EAAAA,EAAAA,KAAA,OAAKG,WAAW,UAChB,UAAa,0BACb,IAAO,2EACP,IAAO,YACP,MAAS,YACT,QAAW,OACX,MAAS,CACP,MAAS,OACT,OAAU,OACV,OAAU,IACV,cAAiB,SACjB,SAAY,WACZ,QAAW,IACX,WAAc,eACd,MAAS,UACT,UAAa,+BACb,IAAO,IACP,KAAQ,OAEF,cACC,WAIrB,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://adobe-developer-app-builder/./src/pages/resources/barcode-reader/test.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lesson-3-testing-a-serverless-action\"\n    }}>{`Lesson 3: Testing a Serverless Action`}</h1>\n    <p>{`An App Builder App created with `}<inlineCode parentName=\"p\">{`aio app init`}</inlineCode>{` has a `}<a parentName=\"p\" {...{\n        \"href\": \"https://jestjs.io/\"\n      }}>{`Jest`}</a>{` test structure by default. We'll show how to take advantage of it.`}</p>\n    <h2 {...{\n      \"id\": \"unit-tests\"\n    }}>{`Unit tests`}</h2>\n    <p>{`Under `}<inlineCode parentName=\"p\">{`test/actions`}</inlineCode>{`, you should see a file named `}<inlineCode parentName=\"p\">{`barcode.test.js`}</inlineCode>{`. We'll add our barcode action unit tests to it.\nFirst we add some required dependencies like the action itself, the logger, and `}<inlineCode parentName=\"p\">{`bwip-js`}</inlineCode>{` that we'll mock using Jest utilities.   `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { Core } = require('@adobe/aio-sdk');\nconst bwipjs = require('bwip-js');\nconst action = require('./../../actions/barcode/index.js');\n\njest.mock('@adobe/aio-sdk', () => ({\n  Core: {\n    Logger: jest.fn()\n  }\n}));\n\nconst mockLoggerInstance = {\n  info: jest.fn(),\n  debug: jest.fn(),\n  error: jest.fn()\n};\nCore.Logger.mockReturnValue(mockLoggerInstance);\n\njest.mock('bwip-js');\n\nbeforeEach(() => {\n  Core.Logger.mockClear();\n  mockLoggerInstance.info.mockReset();\n  mockLoggerInstance.debug.mockReset();\n  mockLoggerInstance.error.mockReset();\n});\n\n// Test parameters\nconst params = {\n  value: 'test'\n};\n`}</code></pre>\n    <p>{`The first test, which is bootstrapped by default, is whether our action is exporting a main function which is a main requirement for all actions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`test('main should be defined', () => {\n  expect(action.main).toBeInstanceOf(Function);\n});\n`}</code></pre>\n    <p>{`The second test, which is also bootstrapped, is testing the log level defined in the `}<inlineCode parentName=\"p\">{`manifest.yml`}</inlineCode>{` for our barcode action which is defined as `}<inlineCode parentName=\"p\">{`LOG_LEVEL: debug`}</inlineCode>{` by default.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`test('should set logger to use LOG_LEVEL param', async () => {\n  await action.main({\n    LOG_LEVEL: 'level'\n  });\n  expect(Core.Logger).toHaveBeenCalledWith(expect.any(String), { level: 'level' });\n});\n`}</code></pre>\n    <p>{`Next, we'll verify that a successful 200 http action response also returns the correct `}<inlineCode parentName=\"p\">{`Content-Type`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`body`}</inlineCode>{`. For that, we'll mock `}<inlineCode parentName=\"p\">{`bwipjs.toBuffer`}</inlineCode>{` to respond with fake data:   `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`test('should return a 200 http response', async () => {\n  bwipjs.toBuffer.mockResolvedValue('barcode');\n\n  const response = await action.main(params);\n  expect(response.statusCode).toEqual(200);\n  expect(response.headers['Content-Type']).toEqual('image/png');\n  expect(response.body).toEqual('barcode');\n});\n`}</code></pre>\n    <p>{`We'll use the same mechanism to verify a 500 http action response by mocking an error: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`test('if there is an error should return a 500 and log the error', async () => {\n  const error = new Error('barcode error');\n  bwipjs.toBuffer.mockRejectedValue(error);\n\n  const response = await action.main(params);\n  expect(response).toEqual({\n    error : {\n      statusCode: 500,\n      body: { error: 'barcode error' }\n    }\n  });\n  expect(mockLoggerInstance.error).toHaveBeenCalledWith(error);\n});\n`}</code></pre>\n    <p>{`Finally, we'll end the test suite by testing the 400 http response if the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` parameter is missing:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`test('missing input request parameters, should return 400', async () => {\n  const response = await action.main({});\n  expect(response).toEqual({\n    error: {\n      statusCode: 400,\n      body: { error: 'missing parameter(s) \\\\'value\\\\'' }\n    }\n  })\n});\n`}</code></pre>\n    <p>{`To run the tests, we can use `}<inlineCode parentName=\"p\">{`npm run test`}</inlineCode>{`, a predefined npm script in `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` but first we'll modify the script to add the code coverage in the output:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`\"test\": \"jest --collectCoverage=true --testRegex ./test/actions\"\n`}</code></pre>\n    <p>{`Running the unit tests should output 100% coverage (which also includes the utils tests): `}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1168px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"56.875%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/app-builder/static/5f99ad6be690d3777156c4d98dfed3fc/5530d/unit-tests.webp 320w\", \"/app-builder/static/5f99ad6be690d3777156c4d98dfed3fc/0c8fb/unit-tests.webp 640w\", \"/app-builder/static/5f99ad6be690d3777156c4d98dfed3fc/ba85f/unit-tests.webp 1168w\"],\n            \"sizes\": \"(max-width: 1168px) 100vw, 1168px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/app-builder/static/5f99ad6be690d3777156c4d98dfed3fc/dd4a7/unit-tests.png 320w\", \"/app-builder/static/5f99ad6be690d3777156c4d98dfed3fc/0f09e/unit-tests.png 640w\", \"/app-builder/static/5f99ad6be690d3777156c4d98dfed3fc/b38ab/unit-tests.png 1168w\"],\n            \"sizes\": \"(max-width: 1168px) 100vw, 1168px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/app-builder/static/5f99ad6be690d3777156c4d98dfed3fc/b38ab/unit-tests.png\",\n            \"alt\": \"unit-tests\",\n            \"title\": \"unit-tests\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span>{` `}</p>\n    <h2 {...{\n      \"id\": \"end-to-end-tests\"\n    }}>{`End-to-End tests`}</h2>\n    <h2 {...{\n      \"id\": \"end-to-end-tests-1\"\n    }}>{`End-to-End tests`}</h2>\n    <p>{`Similar to unit tests, we have a predefined structure for end-to-end tests, but it's empty - so let's add a test that will read our barcode.\nFor that we'll use `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/javascript-barcode-reader/\"\n      }}>{`javascript-barcode-reader`}</a>{` to read the code128 barcode output by our action. `}</p>\n    <p>{`First, we're adding our dependencies like `}<inlineCode parentName=\"p\">{`node-fetch`}</inlineCode>{` to make an http request to fetch the action response and `}<inlineCode parentName=\"p\">{`javascript-barcode-reader`}</inlineCode>{` to read it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const { Config } = require('@adobe/aio-sdk').Core;\nconst fs = require('fs');\nconst fetch = require('node-fetch');\nconst barcodeReader = require('javascript-barcode-reader');\n`}</code></pre>\n    <p>{`By default, your deployed action is accessible at `}<inlineCode parentName=\"p\">{`https://<namespace>.adobeioruntime.net/api/v1/web/<app-name>-<version>/<action>`}</inlineCode>{`.\nWe can construct the action URL following this pattern:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const namespace = Config.get('runtime.namespace');\nconst hostname = Config.get('cna.hostname') || 'adobeioruntime.net';\nconst packageJSON = JSON.parse(fs.readFileSync('package.json').toString());\nconst runtimePackage = \\`\\${packageJSON.name}-\\${packageJSON.version}\\`;\nconst actionUrl = \\`https://\\${namespace}.\\${hostname}/api/v1/web/\\${runtimePackage}/barcode\\`;\n`}</code></pre>\n    <p>{`We'll create a first test to verify that the action will fail to render a barcode without the `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` parameter and respond accordingly: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`test('returns a 400 when missing value parameter', async () => {\n  const res = await fetch(actionUrl);\n  expect(res).toEqual(expect.objectContaining({\n    status: 400\n  }));\n  const body = await res.json();\n  expect(body).toEqual(expect.objectContaining({\n    error: 'missing parameter(s) \\\\'value\\\\''\n  }));\n});\n`}</code></pre>\n    <p>{`The second test will actually read the value of the barcode and test it against the provided `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` parameter. For that, we'll temporary store the barcode as PNG image in order to pass it to the reader:    `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`test('returns a barcode for the provided value parameter', async () => {\n  const param = 'value';\n  const res = await fetch(\\`\\${actionUrl}?value=\\${param}\\`);\n  expect(res).toEqual(expect.objectContaining({\n    status: 200\n  }));\n  expect(res.headers.get('content-type')).toEqual('image/png');\n\n  const buffer = await res.buffer();\n  const barcode = \\`\\${__dirname}/barcode.png\\`;\n  fs.writeFile(barcode, buffer);\n\n  const value = await barcodeReader({\n    image: barcode,\n    barcode: 'code-128'\n  });\n\n  expect(value).toEqual(param);\n\n  fs.unlinkSync(barcode);\n});\n`}</code></pre>\n    <p>{`Similar to the unit tests, we'll use the npm script `}<inlineCode parentName=\"p\">{`npm run e2e`}</inlineCode>{` from `}<inlineCode parentName=\"p\">{`package.json`}</inlineCode>{` to run the e2e tests which will output:`}</p>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"884px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"40.625%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/app-builder/static/edc0c1d978e4641d2a51fe6d853f2cd1/5530d/e2e-tests.webp 320w\", \"/app-builder/static/edc0c1d978e4641d2a51fe6d853f2cd1/0c8fb/e2e-tests.webp 640w\", \"/app-builder/static/edc0c1d978e4641d2a51fe6d853f2cd1/d4c96/e2e-tests.webp 884w\"],\n            \"sizes\": \"(max-width: 884px) 100vw, 884px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/app-builder/static/edc0c1d978e4641d2a51fe6d853f2cd1/dd4a7/e2e-tests.png 320w\", \"/app-builder/static/edc0c1d978e4641d2a51fe6d853f2cd1/0f09e/e2e-tests.png 640w\", \"/app-builder/static/edc0c1d978e4641d2a51fe6d853f2cd1/2b3a9/e2e-tests.png 884w\"],\n            \"sizes\": \"(max-width: 884px) 100vw, 884px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/app-builder/static/edc0c1d978e4641d2a51fe6d853f2cd1/2b3a9/e2e-tests.png\",\n            \"alt\": \"e2e-tests\",\n            \"title\": \"e2e-tests\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}