"use strict";(self.webpackChunkadobe_developer_app_builder=self.webpackChunkadobe_developer_app_builder||[]).push([[4931],{59860:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return u}});var a=t(58168),i=t(80045),o=(t(88763),t(15680)),r=t(83407);const l=["components"],s={},d={_frontmatter:s},p=r.A;function u(e){let{components:n}=e,t=(0,i.A)(e,l);return(0,o.mdx)(p,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"lesson-1-create-an-event-provider-using-app-builder"},"Lesson 1: Create an Event Provider using App Builder"),(0,o.mdx)("p",null,"In this lesson, we will :"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Create an event provider using an App Builder template"),(0,o.mdx)("li",{parentName:"ul"},"Register the App as event provider "),(0,o.mdx)("li",{parentName:"ul"},"Fire Events"),(0,o.mdx)("li",{parentName:"ul"},"Schedule cron jobs with alarms")),(0,o.mdx)("h2",{id:"create-an-event-provider-using-app-builder-template"},"Create an event provider using App Builder template"),(0,o.mdx)("p",null,"To provide an end-to-end solution, for this Code Lab, we need an event provider to send events to the Journaling API, at a rate that is configurable to help with testing. We will use the OpenWhisk Alarms Package in an App Builder application to create cron jobs. "),(0,o.mdx)("p",null,"First, we will create a new App Builder App from a template, following ",(0,o.mdx)("a",{parentName:"p",href:"../event-driven/lesson1.md"},"this Code Lab"),". Be sure to add ",(0,o.mdx)("inlineCode",{parentName:"p"},"I/O management API")," in the console and choose ",(0,o.mdx)("inlineCode",{parentName:"p"},"publish-event")," in the CLI template. "),(0,o.mdx)("h2",{id:"register-the-app-as-event-provider"},"Register the app as event provider"),(0,o.mdx)("p",null,"To use the CLI to register the app as an event provider, we need to install the Adobe I/O Event CLI plugin, like this:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"npm install -g @adobe/aio-cli-plugin-events\n")),(0,o.mdx)("p",null,"Then follow the steps in ",(0,o.mdx)("a",{parentName:"p",href:"../event-driven/lesson2.md"},"this Code Lab"),"."),(0,o.mdx)("h2",{id:"fire-events-and-set-up-to-consume-them"},"Fire events and set up to consume them"),(0,o.mdx)("p",null,"Now we can arrange to fire events by following ",(0,o.mdx)("a",{parentName:"p",href:"../event-driven/index.md"},"the procedure from this Code Lab"),", making sure to choose Journaling API as the way to consume them."),(0,o.mdx)("h2",{id:"scheduling-cron-jobs-with-alarms"},"Scheduling cron jobs with alarms"),(0,o.mdx)("p",null,"Follow ",(0,o.mdx)("a",{parentName:"p",href:"../cron-jobs/index.md"},"this CodeLab")," to fire events automatically by using the runtime alarms package."),(0,o.mdx)("p",null,"Your ",(0,o.mdx)("inlineCode",{parentName:"p"},"app.config.yaml")," should now look like this:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-yaml"},"application:\n  actions: actions\n  web: web-src\n  runtimeManifest:\n    packages:\n      my-app:\n        license: Apache-2.0\n        actions:\n          generic:\n            function: actions/generic/index.js\n            web: 'yes'\n            runtime: 'nodejs:14'\n            inputs:\n              LOG_LEVEL: debug\n            annotations:\n              require-adobe-auth: true\n              final: true\n          publish-events:\n            function: actions/publish-events/index.js\n            web: 'yes'\n            runtime: 'nodejs:14'\n            inputs:\n              LOG_LEVEL: debug\n              apiKey: $SERVICE_API_KEY\n              providerId: $PROVIDER_ID\n              eventCode: $EVENT_CODE\n              client_id: $CLIENT_ID\n              client_secret: $CLIENT_SECRET\n              technical_account_email: $TECH_ACCOUNT_EMAIL\n              technical_account_id: $TECH_ACCOUNT_ID\n              ims_org_id: $IMS_ORG_ID\n              private_key: $PRIVATE_KEY\n            annotations:\n              final: true\n        Triggers:\n          everyMin:\n            feed: /whisk.system/alarms/interval\n            inputs:\n              minutes: 1\n          rules:\n            everyMinRule:\n              trigger: everyMin\n              action: publish-events\n")),(0,o.mdx)("p",null,"To test the action, execute ",(0,o.mdx)("inlineCode",{parentName:"p"},"aio app deploy")," in the VSCode terminal. Once the deployment is finished, run ",(0,o.mdx)("inlineCode",{parentName:"p"},"aio rt action invoke your-app-name/generic"),", and then verify its result and logs using ",(0,o.mdx)("inlineCode",{parentName:"p"},"aio rt activation get ID")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"aio rt activation logs ID"),"."),(0,o.mdx)("p",null,"If successful, the event provider should automatically send the events, you should be able to use Postman or cURL to verify that the Journaling API is receiving them. "))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-resources-journaling-events-lesson-1-md-fa198fdcd597809b80e8.js.map