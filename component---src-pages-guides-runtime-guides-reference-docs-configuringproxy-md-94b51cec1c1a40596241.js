"use strict";(self.webpackChunkadobe_developer_app_builder=self.webpackChunkadobe_developer_app_builder||[]).push([[459],{34441:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return p},default:function(){return d}});var a=t(58168),r=t(80045),o=(t(88763),t(15680)),m=t(83407);const i=["components"],p={},l={_frontmatter:p},s=m.A;function d(e){let{components:n}=e,t=(0,r.A)(e,i);return(0,o.mdx)(s,(0,a.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h2",{id:"configuring-a-secure-proxy"},"Configuring a Secure Proxy"),(0,o.mdx)("p",null,"For security reasons, Runtime does not expose egress IPs. Customers who need a way to secure communication with downstream services using IP whitelisting can use a proxy between their backend service and I/O Runtime."),(0,o.mdx)("p",null,"This can be done by adding a proxy component (in this example, an AWS EC2 instance running nginx). The proxy component will have a fixed IP address, so using an IP allowlist can secure the backend service. Communication between I/O Runtime and the proxy component will be secured via mutual TLS (mTLS) communication. "),(0,o.mdx)("p",null,(0,o.mdx)("img",{alt:"",src:"E:\\\\GitHub\\\\app-builder\\\\src\\\\pages\\\\images\\\\configure-proxy.png"})),(0,o.mdx)("p",null,"The following steps outline how to:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Configure the NGINX proxy component to support mutual TLS (mTLS)"),(0,o.mdx)("li",{parentName:"ul"},"Configure an AppBuilder action to use mTLS to securely communicate with the proxy component")),(0,o.mdx)("p",null,"An EC2 instance with NGINX installed is a prerequisite for configuring this proxy. The ",(0,o.mdx)("a",{parentName:"p",href:"https://docs.nginx.com/nginx/deployment-guides/amazon-web-services/ec2-instances-for-nginx/"},"official NGINX documentation")," has more information."),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Verify SSH connectivity to the EC2 instance. (screenshot of terminal/template cmd)"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},"ssh -i <your-key.pem> ec2-user@<EC2-IPAddress>\n"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Generate certificates needed for mTLS (link out to example-mtls project for generating secrets)"),(0,o.mdx)("ul",{parentName:"li"},(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Generate ",(0,o.mdx)("strong",{parentName:"p"},"mtls_server.key/.crt")),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},"openssl req -x509 -nodes -days 3650 -newkey rsa:4096 -keyout mtls_server.key -out mtls_server.crt\n"))),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Generate ",(0,o.mdx)("strong",{parentName:"p"},"mtls_client.key/.crt")),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},"openssl req -x509 -nodes -days 3650 -newkey rsa:4096 -keyout mtls_client.key -out mtls_client.crt\n"))))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Use the referenced file ",(0,o.mdx)("inlineCode",{parentName:"p"},"mtls.conf.example")," and replace ",(0,o.mdx)("inlineCode",{parentName:"p"},"DESTINATION_HOST")," with the final destination you would like to proxy to. For example, if your target host is ",(0,o.mdx)("inlineCode",{parentName:"p"},"api.myhost.com")," you would search for this line:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},"proxy_pass https://DESTINATION_HOST\n")),(0,o.mdx)("p",{parentName:"li"}," Then make the replacement:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},"proxy_pass https://api.myhost.com\n")),(0,o.mdx)("p",{parentName:"li"},"Save the resulting file locally as ",(0,o.mdx)("inlineCode",{parentName:"p"},"mtls.conf"),", in the same folder as your certificates.")),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Copy sample NGINX configuration to EC2 instance with updated placeholder details. (terminal screenshots for ",(0,o.mdx)("inlineCode",{parentName:"p"},"scp")," cmds)"),(0,o.mdx)("ol",{parentName:"li"},(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"First copy files to home folder:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},"scp -i <your-key.pem> mtls_server.key mtls_server.crt mtls_client.key mtls_client.crt mtls.conf ec2-user@<EC2-IPAddress>:~/\n"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Then move them into place, while connected via SSH to the ec2 instance:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},"sudo mv ~/mtls* /etc/nginx/conf.d/\n"))))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Restart ",(0,o.mdx)("inlineCode",{parentName:"p"},"nginx"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Verify you can connect via curl locally from the ec2 instance:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},"$ curl -ki --cert /etc/nginx/conf.d/mtls_client.crt --key /etc/nginx/conf.d/mtls_client.key https://localhost/\n")),(0,o.mdx)("ul",{parentName:"li"},(0,o.mdx)("li",{parentName:"ul"},"To preserve your changes, you may ",(0,o.mdx)("a",{parentName:"li",href:"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html"},"create an AMI")," from your running AWS instance."))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"In your AppBuilder app, you will need to make changes to wire the mTLS client key and certificate."),(0,o.mdx)("ul",{parentName:"li"},(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("strong",{parentName:"p"},(0,o.mdx)("inlineCode",{parentName:"strong"},".env"),":")," Add the following lines with paths to your mtls client certificate files."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},"## Support mTLS\n__AIO_MTLS_CERT=(cat /path/to/mtls_client.crt)\n__AIO_MTLS_KEY=(cat /path/to/mtls_client.key)\n"))),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("strong",{parentName:"p"},(0,o.mdx)("inlineCode",{parentName:"strong"},"app.config.yaml"),":")," Add the following default parameters pointing to the environment variables."),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},"inputs:\n    __AIO_MTLS_CERT: $__AIO_MTLS_CERT\n    __AIO_MTLS_KEY: $__AIO_MTLS_KEY\n"))))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"In your action code, you can reference these environment variables when making an HTTP request to the proxy component (replace the ",(0,o.mdx)("inlineCode",{parentName:"p"},"PROXY_ENDPOINT")," with your AWS EC2 hostname/IP):"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},"// configure the client side of mTLS\nconst options = {\n    cert: params.__AIO_MTLS_CERT,\n    key:  params.__AIO_MTLS_KEY,\n    rejectUnauthorized: false, // in test, if you're working with self-signed certificates\n    keepAlive: false, // switch to true if you're making a lot of calls from this client\n};\n\nconst sslConfiguredAgent = new https.Agent(options);\n\ntry {\n    // Replace the `PROXY_ENDPOINT` with your AWS EC2 hostname/IP\n    const url = \"https://PROXY_ENDPOINT/path/to/resource?param=value\"\n\n    console.log(`Making call to: [${url}]`);\n    // make the request just as you would normally ...\n    const response = await fetch(url, {\n    agent: sslConfiguredAgent, // ... but add the agent we initialised\n    });\n\n    const responseBody = await response.text();\n\n    // handle the response as you would see fit\n    console.log(responseBody);\n    return { statusCode: 200, body: { resp: responseBody }};\n} catch (error) {\n    // return the error\n    console.log(error);\n    return { statusCode: 418, body: { error: error }};\n}\n"))),(0,o.mdx)("li",{parentName:"ol"},(0,o.mdx)("p",{parentName:"li"},"Deploy your application to I/O Runtime via ",(0,o.mdx)("inlineCode",{parentName:"p"},"aio app deploy")," and test out the setup by invoking your action."))),(0,o.mdx)("h2",{id:"next-steps"},"Next steps"),(0,o.mdx)("p",null,"Return to the ",(0,o.mdx)("a",{parentName:"p",href:"index.md"},"Runtime Reference Documentation Index"),"."),(0,o.mdx)("p",null,"Return to the ",(0,o.mdx)("a",{parentName:"p",href:"../../index.md"},"Guides Index"),"."))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-runtime-guides-reference-docs-configuringproxy-md-94b51cec1c1a40596241.js.map