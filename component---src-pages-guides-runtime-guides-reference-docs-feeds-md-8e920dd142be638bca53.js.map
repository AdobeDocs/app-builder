{"version":3,"file":"component---src-pages-guides-runtime-guides-reference-docs-feeds-md-8e920dd142be638bca53.js","mappings":"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","sources":["webpack://adobe-developer-app-builder/./src/pages/guides/runtime_guides/reference_docs/feeds.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/app-builder/app-builder/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"using-feeds\"\n    }}>{`Using Feeds`}</h1>\n    <p>{`Feeds are streams of events. The difference between `}<a parentName=\"p\" {...{\n        \"href\": \"triggersrules.md\",\n        \"title\": \"Using Triggers and Rules\"\n      }}>{`triggers`}</a>{` and feeds is:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Triggers`}</strong>{` are a way to classify events: each defines a type of event and is fired when that event is received by Runtime. Triggers are linked to actions by rules; each rule links a trigger to a single action.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Feeds`}</strong>{` are streams of events that are all handled by the same trigger. Each feed is controlled by a `}<em parentName=\"li\">{`feed action`}</em>{` that manages the stream: creating, deleting, pausing or resuming it as needed. In this way, a feed controls the flow of input to a trigger. Feed actions use a REST API to interact with external services that produce the events to which triggers are set to respond.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"creating-feeds-feed-actions\"\n    }}>{`Creating feeds: feed actions`}</h2>\n    <p>{`To create a feed, you first need a feed action. A feed action is an action like any other, but to qualify as a feed action it needs to accept these parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`lifecycleEvent:`}</strong>{` passes in commands to control the feed: `}<inlineCode parentName=\"li\">{`CREATE`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`READ`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`DELETE`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`PAUSE`}</inlineCode>{`, OR `}<inlineCode parentName=\"li\">{`UNPAUSE`}</inlineCode></li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`triggerName:`}</strong>{` provides the fully qualified name of the trigger to associate with this feed`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`authKey:`}</strong>{` the Basic auth credentials of the user who owns the trigger given in `}<inlineCode parentName=\"li\">{`triggerName`}</inlineCode></li>\n    </ul>\n    <p>{`The feed action can take any other parameters you choose; thesy should include any parameters needed to connect to the event source and manage the feed.`}</p>\n    <p>{`Once you have a feed action, create the feed when you create the trigger itself by using the `}<inlineCode parentName=\"p\">{`--feed`}</inlineCode>{` parameter. For example, assume you want to set up a feed for receiving updates to the user's location coming from your mobile app, and have created a feed action named `}<inlineCode parentName=\"p\">{`userLocChange`}</inlineCode>{` in a package in your namespace called `}<inlineCode parentName=\"p\">{`userLoc`}</inlineCode>{`. To create the feed for managing location updates, you could issue the following command in the CLI:`}</p>\n    <p><inlineCode parentName=\"p\">{`aio rt:trigger:create trigLocUpdate --feed userLoc/userLocChange <optional parameters for the feed action>`}</inlineCode></p>\n    <p>{`This command creates a trigger named `}<inlineCode parentName=\"p\">{`trigLocUpdate`}</inlineCode>{`.  Then do something like this:`}</p>\n    <p><inlineCode parentName=\"p\">{`aio rt:action:invoke userLoc/userLocChange --param lifecycleEvent CREATE --param triggerName trigLocUpdate --param authKey <yourauthKey> --param <optional parameters>`}</inlineCode></p>\n    <p>{`This invokes the feed action `}<inlineCode parentName=\"p\">{`userLocChange`}</inlineCode>{`, which sets up the stream of events from your mobile app aimed at the trigger `}<inlineCode parentName=\"p\">{`trigLocUpdate`}</inlineCode>{`.`}</p>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`--feed`}</inlineCode>{` parameter to execute similar functions on feed actions within the `}<inlineCode parentName=\"p\">{`aio rt:trigger:delete`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`aio rt:trigger:update`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`aio rt:trigger:get`}</inlineCode>{` commands.`}</p>\n    <h2 {...{\n      \"id\": \"feed-implementation-patterns\"\n    }}>{`Feed implementation patterns`}</h2>\n    <p>{`You can create a feed according to several different architectural patterns. Three good choices are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Hooks:`}</strong>{` This is the easiest option, if your event source offers a webhook facility. Simply set up the webhook to send an HTML POST directly to a URL to fire the trigger. This works best for low-frequency events.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Polling:`}</strong>{` This is good for managing a regularly scheduled event, so long as it's not too frequent. Set up the feed action to poll an endpoint periodically to fetch new data.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Connections:`}</strong>{` Sometimes, the volume and frequency of events makes it most efficient to set up a persistent connection. But since Runtime is architected as a REST service, a invocations of an action are destroyed as soon as they're executed; in other words, Runtime is by nature not persistent. One option is to set up an external service that maintains a persistent connection with your event source, and arrange for that service to fire events at your feed in Runtime.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"next-steps\"\n    }}>{`Next steps`}</h2>\n    <p>{`Return to the `}<a parentName=\"p\" {...{\n        \"href\": \"index.md\"\n      }}>{`Runtime Reference Documentation Index`}</a>{`.`}</p>\n    <p>{`Return to the `}<a parentName=\"p\" {...{\n        \"href\": \"../../index.md\"\n      }}>{`Guides Index`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutProperties","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}